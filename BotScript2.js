require('dotenv').config();
const { Client, GatewayIntentBits, EmbedBuilder } = require('discord.js');
const fs = require('fs');

const DATA_FILE = './gameData.json';
const BUILDINGS_FILE = './buildings.json';

const ADMINS = new Set([
  '887170337635205141',
  '1202944954192633897',
]);
const baseCellCost = { –¥–µ—Ä–µ–≤–æ: 400, –∫–∞–º–µ–Ω—å: 250, –∂–µ–ª–µ–∑–æ: 100, –µ–¥–∞: 15 };

const VALID_RESOURCES = new Set([
  '–¥–µ—Ä–µ–≤–æ',
  '–∫–∞–º–µ–Ω—å',
  '–∂–µ–ª–µ–∑–æ',
  '–µ–¥–∞',
  '–µ–¥–∏–Ω–∏—Ü–∞_–∏–∑—É—á–µ–Ω–∏—è',
  '—É–≥–æ–ª—å',
  '–∑–æ–ª–æ—Ç–æ',
  '–±–µ—Ç–æ–Ω',
]);

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å—Ç—Ä–æ–π–∫–∞—Ö –∏–∑ JSON
function loadBuildings() {
  try {
    const data = fs.readFileSync(BUILDINGS_FILE, 'utf8');
    return JSON.parse(data);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –ø–æ—Å—Ç—Ä–æ–µ–∫:', err);
    return { tier1: {}, tier2: {} };
  }
}

const buildings = loadBuildings();

function createSkeletonArmy() {
  const count = Math.floor(Math.random() * 7) + 4;
  const hpOne = 2;
  const damageOne = 2;
  return {
    —Ç–∏–ø: '–∞—Ä–º–∏—è_—Å–∫–µ–ª–µ—Ç–æ–≤',
    –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: count,
    —Ö–ø: Array(count).fill(hpOne),
    —É—Ä–æ–Ω: damageOne,
    –¥–µ–±–∞—Ñ—ã: {},
  };
}

function loadData() {
  try {
    const data = fs.readFileSync(DATA_FILE, 'utf8');
    return JSON.parse(data);
  } catch (err) {
    return { –∏–≥—Ä–æ–∫–∏: {} };
  }
}

function saveData(data) {
  fs.writeFileSync(DATA_FILE, JSON.stringify(data, null, 2));
}

function usedCapacity(cell) {
  return cell.–ø–æ—Å—Ç—Ä–æ–π–∫–∏.reduce((sum, b) => sum + b.–µ–º–∫–æ—Å—Ç—å, 0);
}

const client = new Client({
  intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent],
});

client.once('ready', () => {
  console.log(`–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ ${client.user.tag}`);
});

function applyBleeding(enemy) {
  for (let i = 0; i < enemy.—Ö–ø.length; i++) {
    if (enemy.–¥–µ–±–∞—Ñ—ã[i] && enemy.–¥–µ–±–∞—Ñ—ã[i] > 0) {
      enemy.—Ö–ø[i] -= 1;
      enemy.–¥–µ–±–∞—Ñ—ã[i] -= 1;
      if (enemy.—Ö–ø[i] <= 0) {
        enemy.—Ö–ø[i] = 0;
      }
    }
  }
}

function towersAttack(player) {
  const enemies = player.–≤—Ä–∞–≥–∏ || [];

  for (const cell of player.–∫–ª–µ—Ç–∫–∏) {
    const barricadesCount = cell.–ø–æ—Å—Ç—Ä–æ–π–∫–∏.filter(b => 
      b.–∫–ª—é—á === '–¥–µ—Ä–µ–≤—è–Ω–Ω–∞—è_–±–∞—Ä—Ä–∏–∫–∞–¥–∞' ||
      b.–∫–ª—é—á === '–¥–µ—Ä–µ–≤—è–Ω–Ω–æ_–∫–∞–º–µ–Ω–Ω–∞—è_–±–∞—Ä—Ä–∏–∫–∞–¥–∞' ||
      b.–∫–ª—é—á === '—É—Å–∏–ª–µ–Ω–Ω–∞—è_—Å—Ç–µ–Ω–∞' ||
      b.–∫–ª—é—á === '–∂–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω–∞—è_—Å—Ç–µ–Ω–∞' ||
      b.–∫–ª—é—á === '–∫–∞–º–µ–Ω–Ω–∞—è_–±–∞—Ä—Ä–∏–∫–∞–¥–∞'
    ).length;

    for (const building of cell.–ø–æ—Å—Ç—Ä–æ–π–∫–∏) {
      if (!building.–∞–∫—Ç–∏–≤–Ω–∞) continue;
      const bInfo = buildings.tier1[building.–∫–ª—é—á] || buildings.tier2[building.–∫–ª—é—á] || {};

      if (bInfo.—Ç–∏–ø === '–ë–∞—à–Ω—è' && bInfo.—É—Ä–æ–Ω) {
        if (building.–∫–ª—é—á === '–±–∞–ª–∏—Å—Ç–∞') {
          if ((player.—Ä–µ—Å—É—Ä—Å—ã.–¥–µ—Ä–µ–≤–æ || 0) >= bInfo.—Ç—Ä–∞—Ç–∞–î–µ—Ä–µ–≤–∞–ó–∞–í—ã—Å—Ç—Ä–µ–ª) {
            player.—Ä–µ—Å—É—Ä—Å—ã.–¥–µ—Ä–µ–≤–æ -= bInfo.—Ç—Ä–∞—Ç–∞–î–µ—Ä–µ–≤–∞–ó–∞–í—ã—Å—Ç—Ä–µ–ª;
            enemies.forEach(enemy => {
              if (enemy.—Ç–∏–ø === '–∞—Ä–º–∏—è_—Å–∫–µ–ª–µ—Ç–æ–≤') {
                for (let i = 0; i < enemy.—Ö–ø.length; i++) {
                  if (enemy.—Ö–ø[i] > 0) {
                    enemy.—Ö–ø[i] -= bInfo.—É—Ä–æ–Ω;
                    if (enemy.—Ö–ø[i] < 0) enemy.—Ö–ø[i] = 0;
                    break;
                  }
                }
              }
            });
          }
        } else {
          enemies.forEach(enemy => {
            if (enemy.—Ç–∏–ø === '–∞—Ä–º–∏—è_—Å–∫–µ–ª–µ—Ç–æ–≤') {
              for (let i = 0; i < enemy.—Ö–ø.length; i++) {
                if (enemy.—Ö–ø[i] > 0) {
                  enemy.—Ö–ø[i] -= bInfo.—É—Ä–æ–Ω;
                  if (enemy.—Ö–ø[i] < 0) enemy.—Ö–ø[i] = 0;
                  break;
                }
              }
            }
          });
        }
      }
    }
  }
}

async function enemiesAttack(player, channel) {
  const enemies = player.–≤—Ä–∞–≥–∏ || [];
  const messages = [];

  for (const enemy of enemies) {
    if (enemy.—Ç–∏–ø === '–∞—Ä–º–∏—è_—Å–∫–µ–ª–µ—Ç–æ–≤') {
      for (let i = 0; i < enemy.—Ö–ø.length; i++) {
        if (enemy.—Ö–ø[i] <= 0) continue;

        const cell = player.–∫–ª–µ—Ç–∫–∏[0];
        if (!cell || cell.–ø–æ—Å—Ç—Ä–æ–π–∫–∏.length === 0) continue;

        const aliveBuildings = cell.–ø–æ—Å—Ç—Ä–æ–π–∫–∏.filter(
          b => b.–ø—Ä–æ—á–Ω–æ—Å—Ç—å !== null && b.–ø—Ä–æ—á–Ω–æ—Å—Ç—å > 0
        );
        if (aliveBuildings.length === 0) continue;

        const defenseBuildings = aliveBuildings.filter(
          b => b.—Ç–∏–ø === '–û–±–æ—Ä–æ–Ω–∞'
        );

        let target;
        if (defenseBuildings.length > 0) {
          target = defenseBuildings[Math.floor(Math.random() * defenseBuildings.length)];
        } else {
          target = aliveBuildings[Math.floor(Math.random() * aliveBuildings.length)];
        }

        if (target.–∫–ª—é—á === '—à–∏–ø—ã') {
          if (!enemy.–¥–µ–±–∞—Ñ—ã[i]) enemy.–¥–µ–±–∞—Ñ—ã[i] = 2;
          continue;
        }

        target.–ø—Ä–æ—á–Ω–æ—Å—Ç—å -= enemy.—É—Ä–æ–Ω;
        if (target.–ø—Ä–æ—á–Ω–æ—Å—Ç—å < 0) target.–ø—Ä–æ—á–Ω–æ—Å—Ç—å = 0;

        messages.push(`üèóÔ∏è "${target.–∏–º—è}" –ø–æ–ª—É—á–∏–ª–∞ —É—Ä–æ–Ω!`);
      }
    }
  }

  if (messages.length > 0) {
    await channel.send(messages.join('\n'));
  }
}

function removeDestroyedBuildings(player) {
  for (const cell of player.–∫–ª–µ—Ç–∫–∏) {
    const toRemove = [];
    for (const building of cell.–ø–æ—Å—Ç—Ä–æ–π–∫–∏) {
      if (building.–ø—Ä–æ—á–Ω–æ—Å—Ç—å !== null && building.–ø—Ä–æ—á–Ω–æ—Å—Ç—å <= 0) {
        toRemove.push(building);
      }
    }

    for (const b of toRemove) {
      const idx = cell.–ø–æ—Å—Ç—Ä–æ–π–∫–∏.indexOf(b);
      if (idx !== -1) cell.–ø–æ—Å—Ç—Ä–æ–π–∫–∏.splice(idx, 1);
    }
  }
}

function removeDeadEnemies(player) {
  if (!player.–≤—Ä–∞–≥–∏) return;
  player.–≤—Ä–∞–≥–∏ = player.–≤—Ä–∞–≥–∏.filter(enemy => {
    if (enemy.—Ç–∏–ø === '–∞—Ä–º–∏—è_—Å–∫–µ–ª–µ—Ç–æ–≤') {
      const aliveCount = enemy.—Ö–ø.filter(hp => hp > 0).length;
      return aliveCount > 0;
    }
    return true;
  });
}

client.on('messageCreate', async (message) => {
  if (message.author.bot) return;

  const args = message.content.trim().split(/ +/);
  const command = args.shift().toLowerCase();

  let data = loadData();

  if (command === '!–∏–Ω—Ñ–æ') {
    if (args.length === 0) {
      return message.channel.send('‚ùó –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏. –ü—Ä–∏–º–µ—Ä: !–∏–Ω—Ñ–æ –ª–µ—Å–æ–ø–∏–ª–∫–∞');
    }
    const name = args.join(' ').toLowerCase();

    let building = buildings.tier1[name] || buildings.tier2[name];
    if (!building) {
      return message.channel.send(`‚ùå –ü–æ—Å—Ç—Ä–æ–π–∫–∞ "${name}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
    }

    const info = `üèóÔ∏è **${building.–∏–º—è}**\n` +
                 `–ï–º–∫–æ—Å—Ç—å: ${building.–µ–º–∫–æ—Å—Ç—å} –ï.–ü.\n` +
                 `–°—Ç–æ–∏–º–æ—Å—Ç—å:\n` +
                 Object.entries(building.—Å—Ç–æ–∏–º–æ—Å—Ç—å).map(([res, val]) => `- ${res}: ${val}`).join('\n') + `\n` +
                 `–ü—Ä–æ—á–Ω–æ—Å—Ç—å: ${building.–ø—Ä–æ—á–Ω–æ—Å—Ç—å}\n` +
                 (building.–∏–Ω—Ç–µ—Ä–≤–∞–ª ? `–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞: ${building.–∏–Ω—Ç–µ—Ä–≤–∞–ª} —Ö–æ–¥–æ–≤\n` : '') +
                 (building.–æ–ø–∏—Å–∞–Ω–∏–µ ? `–û–ø–∏—Å–∞–Ω–∏–µ: ${building.–æ–ø–∏—Å–∞–Ω–∏–µ}` : '');

    return message.channel.send(info);
  }

  if (command === '!—Å—Ç–∞—Ä—Ç') {
    if (args[0] && args[0].toLowerCase() === '–Ω–æ–≤–∞—è') {
      data.–∏–≥—Ä–æ–∫–∏[message.author.id] = {
        —Ö–æ–¥: 1,
        —Ä–µ—Å—É—Ä—Å—ã: { –¥–µ—Ä–µ–≤–æ: 150, –∫–∞–º–µ–Ω—å: 125, –∂–µ–ª–µ–∑–æ: 40, –µ–¥–∞: 0, –∫–æ–∂–∞: 0, –±–µ—Ç–æ–Ω: 0, —É–≥–æ–ª—å: 0, –∑–æ–ª–æ—Ç–æ: 0, –µ–¥–∏–Ω–∏—Ü–∞_–∏–∑—É—á–µ–Ω–∏—è: 0 },
        –∫–ª–µ—Ç–∫–∏: [{ –µ–º–∫–æ—Å—Ç—å: 20, –ø–æ—Å—Ç—Ä–æ–π–∫–∏: [] }],
        –≤—Ä–∞–≥–∏: [],
      };
      saveData(data);
      return message.channel.send('üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í–∞—à–µ —Å—Ç–∞—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–æ.');
    } else if (data.–∏–≥—Ä–æ–∫–∏[message.author.id]) {
      return message.channel.send(
        `‚ö† –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è –∏–≥—Ä–∞, @${message.author.username}.\n` +
        '–ù–∞–ø–∏—à–∏—Ç–µ **!—Å—Ç–∞—Ä—Ç –Ω–æ–≤–∞—è**, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏ —Å—Ç–µ—Ä–µ—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ.'
      );
    } else {
      data.–∏–≥—Ä–æ–∫–∏[message.author.id] = {
        —Ö–æ–¥: 1,
        —Ä–µ—Å—É—Ä—Å—ã: { –¥–µ—Ä–µ–≤–æ: 150, –∫–∞–º–µ–Ω—å: 125, –∂–µ–ª–µ–∑–æ: 40, –µ–¥–∞: 0 },
        –∫–ª–µ—Ç–∫–∏: [{ –µ–º–∫–æ—Å—Ç—å: 20, –ø–æ—Å—Ç—Ä–æ–π–∫–∏: [] }],
        –≤—Ä–∞–≥–∏: [],
      };
      saveData(data);
      return message.channel.send(
        'üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –£ –≤–∞—Å –µ—Å—Ç—å 1 –∫–ª–µ—Ç–∫–∞ —Å –ª–∏–º–∏—Ç–æ–º 20 –ï.–ü. –∏ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥ –ø—Ä–æ–ø–∏—à–∏—Ç–µ **!–∫–æ–º–∞–Ω–¥—ã.**'
      );
    }
  }

  if (command === '!—Ö–æ–¥') {
    const player = data.–∏–≥—Ä–æ–∫–∏[message.author.id];
    if (!player) return message.channel.send('‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π !—Å—Ç–∞—Ä—Ç');

    player.—Ö–æ–¥ += 1;

    if (!player.–≤—Ä–∞–≥–∏ || player.–≤—Ä–∞–≥–∏.length === 0) {
      player.–≤—Ä–∞–≥–∏ = [createSkeletonArmy()];
      await message.channel.send('‚ö†Ô∏è –ù–∞ –≤–∞—à—É –±–∞–∑—É –Ω–∞–ø–∞–ª–∞ –∞—Ä–º–∏—è —Å–∫–µ–ª–µ—Ç–æ–≤!');
    }

    const income = {
      –µ–¥–∏–Ω–∏—Ü–∞_–∏–∑—É—á–µ–Ω–∏—è: 0,
      –¥–µ—Ä–µ–≤–æ: 0,
      –∫–∞–º–µ–Ω—å: 0,
      –∂–µ–ª–µ–∑–æ: 0,
      –µ–¥–∞: 0,
      –∫–æ–∂–∞: 0,
      –±–µ—Ç–æ–Ω: 0,
      —É–≥–æ–ª—å: 0,
      –∑–æ–ª–æ—Ç–æ: 0
    };

    for (const cell of player.–∫–ª–µ—Ç–∫–∏) {
      for (const building of cell.–ø–æ—Å—Ç—Ä–æ–π–∫–∏) {
        const bInfo = buildings.tier1[building.–∫–ª—é—á] || buildings.tier2[building.–∫–ª—é—á] || null;
        if (!bInfo) continue;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
        let canProduce = true;
        if (bInfo.–∏–Ω—Ç–µ—Ä–≤–∞–ª) {
          if (!building.–ø–æ—Å–ª–µ–¥–Ω–∏–π_—Ö–æ–¥) {
            building.–ø–æ—Å–ª–µ–¥–Ω–∏–π_—Ö–æ–¥ = player.—Ö–æ–¥;
          } else {
            canProduce = (player.—Ö–æ–¥ - building.–ø–æ—Å–ª–µ–¥–Ω–∏–π_—Ö–æ–¥) >= bInfo.–∏–Ω—Ç–µ—Ä–≤–∞–ª;
          }
        }

        if (canProduce) {
          if (bInfo.–¥–æ–±—ã—á–∞) {
            for (const [res, val] of Object.entries(bInfo.–¥–æ–±—ã—á–∞)) {
              income[res] = (income[res] || 0) + val;
            }
            if (bInfo.–∏–Ω—Ç–µ—Ä–≤–∞–ª) {
              building.–ø–æ—Å–ª–µ–¥–Ω–∏–π_—Ö–æ–¥ = player.—Ö–æ–¥;
            }
          }
        }

        if (bInfo.—Ç—Ä–∞—Ç–∏—Ç–ü—Ä–æ—á–Ω–æ—Å—Ç—å–ó–∞–•–æ–¥ && building.–ø—Ä–æ—á–Ω–æ—Å—Ç—å !== null) {
          building.–ø—Ä–æ—á–Ω–æ—Å—Ç—å -= 1;
          if (building.–ø—Ä–æ—á–Ω–æ—Å—Ç—å < 0) building.–ø—Ä–æ—á–Ω–æ—Å—Ç—å = 0;
        }
      }
    }

    towersAttack(player);
    await enemiesAttack(player, message.channel);
    player.–≤—Ä–∞–≥–∏.forEach(applyBleeding);
    removeDestroyedBuildings(player);
    removeDeadEnemies(player);

    for (const [res, val] of Object.entries(income)) {
      player.—Ä–µ—Å—É—Ä—Å—ã[res] = (player.—Ä–µ—Å—É—Ä—Å—ã[res] || 0) + val;
    }

    saveData(data);

    let reply = `‚è≥ –•–æ–¥ ${player.—Ö–æ–¥} –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n–î–æ—Ö–æ–¥ –∑–∞ —Ö–æ–¥:\n`;
    if (income.–¥–µ—Ä–µ–≤–æ) reply += `üå≤ –î–µ—Ä–µ–≤–æ: +${income.–¥–µ—Ä–µ–≤–æ}\n`;
    if (income.–∫–∞–º–µ–Ω—å) reply += `ü™® –ö–∞–º–µ–Ω—å: +${income.–∫–∞–º–µ–Ω—å}\n`;
    if (income.–∂–µ–ª–µ–∑–æ) reply += `‚õì –ñ–µ–ª–µ–∑–æ: +${income.–∂–µ–ª–µ–∑–æ}\n`;
    if (income.–µ–¥–∞) reply += `üçñ –ï–¥–∞: +${income.–µ–¥–∞}\n`;
    if (income.–µ–¥–∏–Ω–∏—Ü–∞_–∏–∑—É—á–µ–Ω–∏—è) reply += `üî¨ –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑—É—á–µ–Ω–∏—è: +${income.–µ–¥–∏–Ω–∏—Ü–∞_–∏–∑—É—á–µ–Ω–∏—è}\n`;
    if (income.—É–≥–æ–ª—å) reply += `‚ö´ –£–≥–æ–ª—å: +${income.—É–≥–æ–ª—å}\n`;
    if (income.–∑–æ–ª–æ—Ç–æ) reply += `üèÜ –ó–æ–ª–æ—Ç–æ: +${income.–∑–æ–ª–æ—Ç–æ}\n`;
    if (income.–±–µ—Ç–æ–Ω) reply += `üß± –ë–µ—Ç–æ–Ω: +${income.–±–µ—Ç–æ–Ω}\n`;
    if (income.–∫–æ–∂–∞) reply += `ü¶¥ –ö–æ–∂–∞: +${income.–∫–æ–∂–∞}\n`;

    if (player.–≤—Ä–∞–≥–∏.length > 0) {
      player.–≤—Ä–∞–≥–∏.forEach((enemy, idx) => {
        if (enemy.—Ç–∏–ø === '–∞—Ä–º–∏—è_—Å–∫–µ–ª–µ—Ç–æ–≤') {
          const aliveCount = enemy.—Ö–ø.filter(hp => hp > 0).length;
          reply += `\n‚ò†Ô∏è –ê—Ä–º–∏—è —Å–∫–µ–ª–µ—Ç–æ–≤ #${idx + 1}: ${aliveCount} –∏–∑ ${enemy.—Ö–ø.length} –∂–∏–≤—ã—Ö`;
        }
      });
    }

    return message.channel.send(reply);
  }

  if (command === '!–∫—É–ø–∏—Ç—å–∫–ª–µ—Ç–∫—É') {
    const player = data.–∏–≥—Ä–æ–∫–∏[message.author.id];
    if (!player) return message.channel.send('‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π !—Å—Ç–∞—Ä—Ç');

    const nextCellNumber = player.–∫–ª–µ—Ç–∫–∏.length + 1;

    const cost = {
      –¥–µ—Ä–µ–≤–æ: baseCellCost.–¥–µ—Ä–µ–≤–æ * nextCellNumber,
      –∫–∞–º–µ–Ω—å: baseCellCost.–∫–∞–º–µ–Ω—å * nextCellNumber,
      –∂–µ–ª–µ–∑–æ: baseCellCost.–∂–µ–ª–µ–∑–æ * nextCellNumber,
      –µ–¥–∞: baseCellCost.–µ–¥–∞ * nextCellNumber,
    };

    for (const [res, price] of Object.entries(cost)) {
      if ((player.—Ä–µ—Å—É—Ä—Å—ã[res] || 0) < price) {
        return message.channel.send(`‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–ª–µ—Ç–∫–∏ ${nextCellNumber}: ${res} (–Ω—É–∂–Ω–æ ${price})`);
      }
    }

    // –°–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
    for (const [res, price] of Object.entries(cost)) {
      player.—Ä–µ—Å—É—Ä—Å—ã[res] -= price;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–ª–µ—Ç–∫—É
    player.–∫–ª–µ—Ç–∫–∏.push({ –µ–º–∫–æ—Å—Ç—å: 20, –ø–æ—Å—Ç—Ä–æ–π–∫–∏: [] });

    saveData(data);

    return message.channel.send(`‚úÖ –ö–ª–µ—Ç–∫–∞ ${nextCellNumber} —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–∞ –∑–∞: –¥–µ—Ä–µ–≤–æ ${cost.–¥–µ—Ä–µ–≤–æ}, –∫–∞–º–µ–Ω—å ${cost.–∫–∞–º–µ–Ω—å}, –∂–µ–ª–µ–∑–æ ${cost.–∂–µ–ª–µ–∑–æ}!`);
  }

  if (command === '!—Ä–µ—Å—É—Ä—Å—ã') {
    const player = data.–∏–≥—Ä–æ–∫–∏[message.author.id];
    if (!player) return message.channel.send('‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π !—Å—Ç–∞—Ä—Ç');

    const res = player.—Ä–µ—Å—É—Ä—Å—ã;
    return message.channel.send(
      `üì¶ **–í–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã:**\n` +
      `üå≤ –î–µ—Ä–µ–≤–æ: ${res.–¥–µ—Ä–µ–≤–æ}\n` +
      `ü™® –ö–∞–º–µ–Ω—å: ${res.–∫–∞–º–µ–Ω—å}\n` +
      `‚õì –ñ–µ–ª–µ–∑–æ: ${res.–∂–µ–ª–µ–∑–æ}\n` +
      `üçñ –ï–¥–∞: ${res.–µ–¥–∞}\n` +
      `üìò –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑—É—á–µ–Ω–∏—è: ${res.–µ–¥–∏–Ω–∏—Ü–∞_–∏–∑—É—á–µ–Ω–∏—è}\n` +
      `‚ö´ –£–≥–æ–ª—å: ${res.—É–≥–æ–ª—å}\n` +
      `ü™ô –ó–æ–ª–æ—Ç–æ: ${res.–∑–æ–ª–æ—Ç–æ}\n` +
      `üß± –ë–µ—Ç–æ–Ω: ${res.–±–µ—Ç–æ–Ω}`
    );
  }

  if (command === '!–∫–ª–µ—Ç–∫–∏') {
    const player = data.–∏–≥—Ä–æ–∫–∏[message.author.id];
    if (!player) return message.channel.send('‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π !—Å—Ç–∞—Ä—Ç');

    if (player.–∫–ª–µ—Ç–∫–∏.length === 0) {
      return message.channel.send('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–ª–µ—Ç–æ–∫.');
    }

    let reply = `üè† **–í–∞—à–∏ –∫–ª–µ—Ç–∫–∏:**\n`;

    player.–∫–ª–µ—Ç–∫–∏.forEach((cell, i) => {
      const –∑–∞–Ω—è—Ç–æ = usedCapacity(cell);
      const income = {};
      let brokenBuildings = [];

      for (const b of cell.–ø–æ—Å—Ç—Ä–æ–π–∫–∏) {
        const bInfo = buildings.tier1[b.–∫–ª—é—á] || buildings.tier2[b.–∫–ª—é—á] || null;
        if (bInfo && bInfo.–¥–æ–±—ã—á–∞) {
          for (const [res, val] of Object.entries(bInfo.–¥–æ–±—ã—á–∞)) {
            income[res] = (income[res] || 0) + val;
          }
        }
        if (bInfo && bInfo.—Ç—Ä–∞—Ç–∏—Ç–ü—Ä–æ—á–Ω–æ—Å—Ç—å–ó–∞–•–æ–¥ && b.–ø—Ä–æ—á–Ω–æ—Å—Ç—å !== null && b.–ø—Ä–æ—á–Ω–æ—Å—Ç—å <= 2) {
          brokenBuildings.push(b.–∏–º—è);
        }
      }

      reply += `\n**–ö–ª–µ—Ç–∫–∞ ${i + 1}** (${–∑–∞–Ω—è—Ç–æ}/${cell.–µ–º–∫–æ—Å—Ç—å} –ï.–ü.)\n–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∑–∞ —Ö–æ–¥:\n`;

      const icons = {
        –¥–µ—Ä–µ–≤–æ: 'üå≤',
        –∫–∞–º–µ–Ω—å: 'ü™®',
        –∂–µ–ª–µ–∑–æ: '‚õì',
        –µ–¥–∞: 'üçñ',
        –µ–¥–∏–Ω–∏—Ü–∞_–∏–∑—É—á–µ–Ω–∏—è: 'üìö',
        —É–≥–æ–ª—å: '‚ö´',
        –∑–æ–ª–æ—Ç–æ: 'üèÜ',
        –±–µ—Ç–æ–Ω: 'üß±'
      };

      const prodLines = [];
      for (const [res, val] of Object.entries(income)) {
        if (val > 0) {
          prodLines.push(`  ${icons[res] || ''} ${res.charAt(0).toUpperCase() + res.slice(1)}: +${val}`);
        }
      }
      if (prodLines.length === 0) prodLines.push('  ‚Äî –Ω–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞');
      reply += prodLines.join('\n') + '\n';

      if (brokenBuildings.length > 0) {
        reply += `‚ö†Ô∏è –ß–µ—Ä–µ–∑ 2 –∏–ª–∏ –º–µ–Ω—å—à–µ —Ö–æ–¥–æ–≤ —Å–ª–æ–º–∞–µ—Ç—Å—è:\n  ${[...new Set(brokenBuildings)].join(', ')}\n`;
      }
    });

    if (player.–≤—Ä–∞–≥–∏ && player.–≤—Ä–∞–≥–∏.length > 0) {
      reply += `\n‚ò†Ô∏è **–í—Ä–∞–≥–∏ –Ω–∞ –∫–ª–µ—Ç–∫–∞—Ö:**\n`;

      const enemyGroups = {};
      for (const enemy of player.–≤—Ä–∞–≥–∏) {
        if (!enemy.—Ç–∏–ø) continue;
        const hpOne = enemy.—Ö–ø.length > 0 ? enemy.—Ö–ø[0] : 0;
        const key = `${enemy.—Ç–∏–ø}||${hpOne}||${enemy.—É—Ä–æ–Ω}`;
        if (!enemyGroups[key]) enemyGroups[key] = { enemy, count: 0, totalHP: 0 };
        const aliveCount = enemy.—Ö–ø.filter(hp => hp > 0).length;
        enemyGroups[key].count += aliveCount;
        enemyGroups[key].totalHP += enemy.—Ö–ø.reduce((a, v) => a + v, 0);
      }

      for (const [key, group] of Object.entries(enemyGroups)) {
        const [—Ç–∏–ø, hpOne, —É—Ä–æ–Ω] = key.split('||');
        reply += `\n[${—Ç–∏–ø.replace(/_/g, ' ')}]\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${group.count}\n–•–ü —É –æ–¥–Ω–æ–≥–æ: ${hpOne}\n–û–±—â–µ–µ –•–ü: ${group.totalHP}\n–£—Ä–æ–Ω –∑–∞ —Ö–æ–¥ (–æ–±—â–∏–π): ${group.count * parseInt(—É—Ä–æ–Ω)}\n`;
      }
    } else {
      reply += `\n–ù–∞ –≤–∞—à–∏—Ö –∫–ª–µ—Ç–∫–∞—Ö –Ω–µ—Ç –≤—Ä–∞–≥–æ–≤.`;
    }

    return message.channel.send(reply);
  }

  if (command === '!–æ–∫–ª–µ—Ç–∫–µ') {
    const player = data.–∏–≥—Ä–æ–∫–∏[message.author.id];
    if (!player) return message.channel.send('‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π !—Å—Ç–∞—Ä—Ç');

    const cellIndex = parseInt(args[0], 10) - 1;
    if (isNaN(cellIndex) || cellIndex < 0 || cellIndex >= player.–∫–ª–µ—Ç–∫–∏.length) {
      return message.channel.send('‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–ª–µ—Ç–∫–∏.');
    }

    const cell = player.–∫–ª–µ—Ç–∫–∏[cellIndex];
    let reply = `üè† **–ö–ª–µ—Ç–∫–∞ ${cellIndex + 1}:**\n`;

    if (cell.–ø–æ—Å—Ç—Ä–æ–π–∫–∏.length === 0) {
      reply += '  ‚Äî –ü—É—Å—Ç–æ\n';
    } else {
      cell.–ø–æ—Å—Ç—Ä–æ–π–∫–∏.forEach((b, i) => {
        reply += `  ${i + 1}. ${b.–∏–º—è} ‚Äî HP: ${b.–ø—Ä–æ—á–Ω–æ—Å—Ç—å === null ? '‚àû' : b.–ø—Ä–æ—á–Ω–æ—Å—Ç—å}\n`;
      });
    }

    return message.channel.send(reply);
  }

  if (command === '!—Å–ø–∏—Å–æ–∫') {
    const tierArg = args[0] ? args[0].toLowerCase() : '1';

    if (tierArg === '1' || tierArg === '—Ç–∏—Ä1' || tierArg === '—Ç–∏p1') {
      let reply = `üìã **–ü–æ—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏—Ä–∞ 1:**\n\n`;
      for (const b of Object.values(buildings.tier1)) {
        const costStr = Object.entries(b.—Å—Ç–æ–∏–º–æ—Å—Ç—å)
          .map(([res, amt]) => `${amt} ${res}`)
          .join(', ');
        reply += `- ${b.–∏–º—è} ‚Äî ${b.–µ–º–∫–æ—Å—Ç—å} –ï.–ü., –ø—Ä–æ—á–Ω–æ—Å—Ç—å: ${
          b.–ø—Ä–æ—á–Ω–æ—Å—Ç—å === null ? '‚àû' : b.–ø—Ä–æ—á–Ω–æ—Å—Ç—å
        }, —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${costStr}\n`;
      }
      return message.channel.send(reply);
    }

    if (tierArg === '2' || tierArg === '—Ç–∏—Ä2' || tierArg === '—Ç–∏p2') {
      let reply = `üìã **–ü–æ—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏—Ä–∞ 2:**\n\n`;
      for (const b of Object.values(buildings.tier2)) {
        const costStr = Object.entries(b.—Å—Ç–æ–∏–º–æ—Å—Ç—å)
          .map(([res, amt]) => `${amt} ${res}`)
          .join(', ');
        reply += `- ${b.–∏–º—è} ‚Äî ${b.–µ–º–∫–æ—Å—Ç—å} –ï.–ü., –ø—Ä–æ—á–Ω–æ—Å—Ç—å: ${
          b.–ø—Ä–æ—á–Ω–æ—Å—Ç—å === null ? '‚àû' : b.–ø—Ä–æ—á–Ω–æ—Å—Ç—å
        }, —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${costStr}\n`;
      }
      return message.channel.send(reply);
    }
  }

  if (command === '!–ø–æ—Å—Ç—Ä–æ–∏—Ç—å') {
    const player = data.–∏–≥—Ä–æ–∫–∏[message.author.id];
    if (!player) return message.channel.send('‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π !—Å—Ç–∞—Ä—Ç');

    if (args.length === 0) {
      return message.channel.send('‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏.');
    }

    let cellIndex = 0;
    let buildingNameParts = args;

    const lastArg = args[args.length - 1].toLowerCase();
    if (lastArg.startsWith('–∫–ª–µ—Ç–∫–∞')) {
      const match = lastArg.match(/–∫–ª–µ—Ç–∫–∞\s*(\d+)/) || lastArg.match(/–∫–ª–µ—Ç–∫–∞(\d+)/);
      if (match && match[1]) {
        const num = parseInt(match[1], 10);
        if (num > 0 && num <= player.–∫–ª–µ—Ç–∫–∏.length) {
          cellIndex = num - 1;
          buildingNameParts = args.slice(0, -1);
        } else {
          return message.channel.send(`‚ùå –ö–ª–µ—Ç–∫–∞ ${num} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
        }
      } else {
        return message.channel.send('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª–µ—Ç–∫–∏. –ü—Ä–∏–º–µ—Ä: –∫–ª–µ—Ç–∫–∞ 1');
      }
    }

    const buildingName = buildingNameParts.join(' ').toLowerCase();
    let buildingTemplate = buildings.tier1[buildingName] || buildings.tier2[buildingName];
    if (!buildingTemplate) {
      return message.channel.send('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–¥–∞–Ω–∏–µ.');
    }

    const cell = player.–∫–ª–µ—Ç–∫–∏[cellIndex];
    const usedCap = usedCapacity(cell);

    if (usedCap + buildingTemplate.–µ–º–∫–æ—Å—Ç—å > cell.–µ–º–∫–æ—Å—Ç—å) {
      return message.channel.send(`‚ùå –í –∫–ª–µ—Ç–∫–µ ${cellIndex + 1} –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–µ—Å—Ç–∞ –¥–ª—è ${buildingTemplate.–∏–º—è}.`);
    }

    const countSame = cell.–ø–æ—Å—Ç—Ä–æ–π–∫–∏.filter(b => b.–∫–ª—é—á === buildingTemplate.–∫–ª—é—á).length;

    if (buildingTemplate.–ª–∏–º–∏—Ç–ó–∞–≤–∏—Å–∏—Ç–û—Ç–ë–∞—Ä—Ä–∏–∫–∞–¥) {
      const defenseCount = cell.–ø–æ—Å—Ç—Ä–æ–π–∫–∏.filter(b => b.—Ç–∏–ø === '–û–±–æ—Ä–æ–Ω–∞').length;
      if (countSame >= defenseCount) {
        return message.channel.send(`‚ùå –õ–∏–º–∏—Ç –ø–æ—Å—Ç—Ä–æ–µ–∫ "${buildingTemplate.–∏–º—è}" –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±–æ—Ä–æ–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ—Ä—É–∂–µ–Ω–∏–π (${defenseCount}). –õ–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç.`);
      }
    } else {
      if (countSame >= buildingTemplate.–ª–∏–º–∏—Ç–ù–∞–ö–ª–µ—Ç–∫—É) {
        return message.channel.send(`‚ùå –õ–∏–º–∏—Ç –ø–æ—Å—Ç—Ä–æ–µ–∫ "${buildingTemplate.–∏–º—è}" –Ω–∞ –∫–ª–µ—Ç–∫—É –¥–æ—Å—Ç–∏–≥–Ω—É—Ç.`);
      }
    }

    const missingResources = {};
    for (const [res, cost] of Object.entries(buildingTemplate.—Å—Ç–æ–∏–º–æ—Å—Ç—å)) {
      const playerRes = player.—Ä–µ—Å—É—Ä—Å—ã[res] || 0;
      if (playerRes < cost) {
        missingResources[res] = cost - playerRes;
      }
    }
    if (Object.keys(missingResources).length > 0) {
      let msg = '‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤:\n';
      for (const [res, deficit] of Object.entries(missingResources)) {
        msg += `${res.charAt(0).toUpperCase() + res.slice(1)}: ${deficit}\n`;
      }
      return message.channel.send(msg);
    }

    for (const [res, cost] of Object.entries(buildingTemplate.—Å—Ç–æ–∏–º–æ—Å—Ç—å)) {
      player.—Ä–µ—Å—É—Ä—Å—ã[res] -= cost;
    }

    cell.–ø–æ—Å—Ç—Ä–æ–π–∫–∏.push({
      –∫–ª—é—á: buildingTemplate.–∫–ª—é—á,
      –∏–º—è: buildingTemplate.–∏–º—è,
      –µ–º–∫–æ—Å—Ç—å: buildingTemplate.–µ–º–∫–æ—Å—Ç—å,
      –ø—Ä–æ—á–Ω–æ—Å—Ç—å: buildingTemplate.–ø—Ä–æ—á–Ω–æ—Å—Ç—å === null ? null : buildingTemplate.–ø—Ä–æ—á–Ω–æ—Å—Ç—å,
      –∞–∫—Ç–∏–≤–Ω–∞: true,
      —Ç–∏–ø: buildingTemplate.—Ç–∏–ø || null,
    });

    saveData(data);
    return message.channel.send(`‚úÖ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∞ ${buildingTemplate.–∏–º—è} –≤ –∫–ª–µ—Ç–∫–µ ${cellIndex + 1}!`);
  }

  if (command === '!—É–¥–∞–ª–∏—Ç—å') {
    const player = data.–∏–≥—Ä–æ–∫–∏[message.author.id];
    if (!player) return message.channel.send('‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π !—Å—Ç–∞—Ä—Ç');

    if (args.length === 0) {
      return message.channel.send('‚ùó –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: !—É–¥–∞–ª–∏—Ç—å –ª–µ—Å–æ–ø–∏–ª–∫–∞');
    }

    let cellIndex = 0;
    let buildingNameParts = args;

    const lastArg = args[args.length - 1].toLowerCase();
    if (lastArg.startsWith('–∫–ª–µ—Ç–∫–∞')) {
      const match = lastArg.match(/–∫–ª–µ—Ç–∫–∞\s*(\d+)/) || lastArg.match(/–∫–ª–µ—Ç–∫–∞(\d+)/);
      if (match && match[1]) {
        const num = parseInt(match[1], 10);
        if (num > 0 && num <= player.–∫–ª–µ—Ç–∫–∏.length) {
          cellIndex = num - 1;
          buildingNameParts = args.slice(0, -1);
        } else {
          return message.channel.send(`‚ùå –ö–ª–µ—Ç–∫–∞ ${num} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
        }
      } else {
        return message.channel.send('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª–µ—Ç–∫–∏. –ü—Ä–∏–º–µ—Ä: –∫–ª–µ—Ç–∫–∞ 1');
      }
    }

    const buildingName = buildingNameParts.join(' ').toLowerCase();
    const buildingTemplate = buildings.tier1[buildingName] || buildings.tier2[buildingName];
    if (!buildingTemplate) {
      return message.channel.send(`‚ùå –ü–æ—Å—Ç—Ä–æ–π–∫–∞ "${buildingName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
    }

    const cell = player.–∫–ª–µ—Ç–∫–∏[cellIndex];
    if (!cell) return message.channel.send('‚ùå –ö–ª–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');

    const idx = cell.–ø–æ—Å—Ç—Ä–æ–π–∫–∏.findIndex(b => b.–∫–ª—é—á === buildingTemplate.–∫–ª—é—á);
    if (idx === -1) {
      return message.channel.send(`‚ùå –í –∫–ª–µ—Ç–∫–µ ${cellIndex + 1} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∞ "${buildingTemplate.–∏–º—è}".`);
    }

    cell.–ø–æ—Å—Ç—Ä–æ–π–∫–∏.splice(idx, 1);
    saveData(data);
    return message.channel.send(`‚úÖ –ü–æ—Å—Ç—Ä–æ–π–∫–∞ "${buildingTemplate.–∏–º—è}" —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫–ª–µ—Ç–∫–∏ ${cellIndex + 1}.`);
  }

  if (command === '!–æ–∏–≥—Ä–æ–∫–µ') {
    const mentionedUser = message.mentions.users.first();
    if (!mentionedUser) {
      return message.channel.send('‚ùó –£–∫–∞–∂–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ü—Ä–∏–º–µ—Ä: !–æ–∏–≥—Ä–æ–∫–µ @–Ω–∏–∫');
    }

    const playerId = mentionedUser.id;
    let playerData = data.–∏–≥—Ä–æ–∫–∏[playerId];
    if (!playerData) {
      return message.channel.send(`‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µ ${mentionedUser.username} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
    }

    let reply = `üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µ ${mentionedUser}:\n`;
    reply += `–•–æ–¥: ${playerData.—Ö–æ–¥}\n`;
    reply += `–†–µ—Å—É—Ä—Å—ã: ${Object.entries(playerData.—Ä–µ—Å—É—Ä—Å—ã).map(([res, val]) => `${res}: ${val}`).join(', ')}\n`;
    reply += `–ö–ª–µ—Ç–æ–∫: ${playerData.–∫–ª–µ—Ç–∫–∏.length}\n`;

    return message.channel.send(reply);
  }

  if (command === '!–∫–æ–º–∞–Ω–¥—ã') {
    const cmds = [
      '**!–æ–∏–≥—Ä–µ** ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–≥—Ä–µ',
      '**!—Å—Ç–∞—Ä—Ç** ‚Äî –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É',
      '**!—Ä–µ—Å—É—Ä—Å—ã** ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã',
      '**!–∫–ª–µ—Ç–∫–∏** ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—Å–µ—Ö –∫–ª–µ—Ç–æ–∫ –∏ —Å–æ–±—ã—Ç–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)',
      '**!–æ–∫–ª–µ—Ç–∫–µ [–Ω–æ–º–µ—Ä]** ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–ª–µ—Ç–∫–∏',
      '**!–∫—É–ø–∏—Ç—å–∫–ª–µ—Ç–∫—É** ‚Äî –ø–æ–∫—É–ø–∫–∞ –Ω–æ–≤–æ–π –∫–ª–µ—Ç–∫–∏ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å',
      '**!—Å–ø–∏—Å–æ–∫ [1|2]** ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç—Ä–æ–µ–∫ –ø–æ —Ç–∏—Ä—É',
      '**!–∏–Ω—Ñ–æ [–Ω–∞–∑–≤–∞–Ω–∏–µ]** ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç—Ä–æ–π–∫–µ',
      '**!–ø–æ—Å—Ç—Ä–æ–∏—Ç—å [–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏] [–Ω–æ–º–µ—Ä –∫–ª–µ—Ç–∫–∏]** ‚Äî —Å—Ç—Ä–æ–∏—Ç –∑–¥–∞–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –∫–ª–µ—Ç–∫–µ 1)',
      '**!—Ö–æ–¥** ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥',
      '**!–∏–∑–º–µ–Ω–µ–Ω–∏–µ** ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç changelog',
      '**!–∫–æ–º–∞–Ω–¥—ã** ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–æ –º–µ–Ω—é',
      '**!–∞–¥–º–∏–Ω—ã** ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω–æ–≤',
      '**!—É–¥–∞–ª–∏—Ç—å [–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏] [–Ω–æ–º–µ—Ä –∫–ª–µ—Ç–∫–∏]** ‚Äî —É–¥–∞–ª—è–µ—Ç –æ–¥–Ω—É —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ—Å—Ç—Ä–æ–π–∫—É',
      '**!–æ–∏–≥—Ä–æ–∫–µ [@—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ]** ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–≥—Ä–æ–∫–µ –µ—Å–ª–∏ –µ—Å—Ç—å'
    ];
    return message.channel.send('üìú **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n' + cmds.join('\n'));
  }

  if (command === '!–æ–∏–≥—Ä–µ') {
    const infoMessage =
      `üéÆ **–û –∏–≥—Ä–µ** üéÆ\n\n` +
      `–≠—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å –ø–æ—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ –æ–±–æ—Ä–æ–Ω–æ–π –≤–∞—à–µ–π –±–∞–∑—ã.\n` +
      `–í—ã —Å—Ç—Ä–æ–∏—Ç–µ —Ä–∞–∑–Ω—ã–µ –∑–¥–∞–Ω–∏—è, –¥–æ–±—ã–≤–∞–µ—Ç–µ —Ä–µ—Å—É—Ä—Å—ã –∏ –æ—Ç—Ä–∞–∂–∞–µ—Ç–µ –∞—Ç–∞–∫–∏ –≤—Ä–∞–≥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞—Ä–º–∏–π —Å–∫–µ–ª–µ—Ç–æ–≤).\n\n` +
      `üõ†Ô∏è **–î—Ä—É–≥–æ–µ:**\n` +
      `- !—Å—Ç–∞—Ä—Ç ‚Äî –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ\n` +
      `- –ï.–ü. ‚Äî —ç—Ç–æ –ï–¥–∏–Ω–∏—Ü—ã –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞\n` +
      `- –ò–≥—Ä–∞ –≤—Å–µ –µ—â–µ –≤ –ë–µ—Ç–µ, –∂–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π\n` +
      `- –ï—Å–ª–∏ –≤—ã —á–∏—Ç–∞–µ—Ç–µ —ç—Ç–æ, —Ç–æ –≤—ã –≤ –ê–ª—å—Ñ–∞-—Ç–µ—Å—Ç–µ\n` +
      `- –ó–¥–µ—Å—å –±—ã–ª: @akulasever\n` +
      `- –ó–¥–µ—Å—å –±—ã–ª: @val_l2011_76994\n` +
      `- –£ –º–µ–Ω—è –Ω–µ—Ç –∏–¥–µ–π, —á—Ç–æ –∑–¥–µ—Å—å –ø–∏—Å–∞—Ç—å. –£–¥–∞—á–∏!\n` +
      `- –ê–≤—Ç–æ—Ä –∏–≥—Ä—ã: @color_and_colour\n` +
      `- –í –∏–≥—Ä–µ –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –∫–∞–∫ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö, —Ç–∞–∫ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫\n` +
      `- –í–µ—Ä—Å–∏—è –∏–≥—Ä—ã: [0.2.4] (Beta WIP)\n\n` +
      `–¶–µ–ª—å –∏–≥—Ä—ã ‚Äî –≤—ã–∂–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –¥–æ–ª—å—à–µ, —Ä–∞–∑–≤–∏–≤–∞—è –±–∞–∑—É –∏ –æ—Ç—Ä–∞–∂–∞—è –∞—Ç–∞–∫–∏.\n\n` +
      `–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ !–∫–æ–º–∞–Ω–¥—ã`;

    return message.channel.send(infoMessage);
  }

  if (command.startsWith('!–∏–∑–º–µ–Ω–µ–Ω–∏–µ')) {
    const args = command.split(' ').slice(1);

    if (args.length > 0 && args[0].toLowerCase() === '—Ñ—É–ª–ª') {
      message.channel.send({
        files: [{
          attachment: './fullchangelogs.txt',
          name: 'fullchangelogs.txt'
        }]
      }).catch(err => {
        console.error(err);
        message.channel.send('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π.');
      });
    } else {
      fs.readFile('./changelog.txt', 'utf8', (err, data) => {
        if (err) {
          console.error(err);
          message.channel.send('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π.');
          return;
        }

        message.channel.send(`üéÆ **üõ†Ô∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:** üéÆ\n\n${data}`);
      });
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
  function isAdmin(userId) {
    return ADMINS.has(userId);
  }

  // –ö–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º
  const adminCommands = new Set(['—Å—Ç–µ—Ä–µ—Ç—å', '–∑–∞–±—Ä–∞—Ç—å', '–≤—ã–¥–∞—Ç—å']);

  // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω—Å–∫–∞—è, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω ‚Äî –±–ª–æ–∫–∏—Ä—É–µ–º
  if (adminCommands.has(command) && !isAdmin(message.author.id)) {
    return message.channel.send('‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.');
  }

  if (command === '—Å—Ç–µ—Ä–µ—Ç—å') {
    if (args.length === 0) {
      return message.channel.send('‚ùó –£–∫–∞–∂–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å—Ç–µ—Ä–µ—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä: —Å—Ç–µ—Ä–µ—Ç—å –º–∏—Ä –∏–ª–∏ —Å—Ç–µ—Ä–µ—Ç—å @–Ω–∏–∫');
    }

    if (args[0].toLowerCase() === '–º–∏—Ä') {
      const embed = new EmbedBuilder()
        .setDescription('‚ú® –î–∞ –±—É–¥–µ—Ç —Ç–∞–∫! ‚ú®')
        .setImage('https://tenor.com/view/no-more-deals-undertale-chara-shattered-soul-broken-gif-6615800318398858463');
      return message.channel.send({ embeds: [embed] });
    }

    const mentionedUser = message.mentions.users.first();
    if (!mentionedUser) {
      return message.channel.send('‚ùó –£–∫–∞–∂–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ü—Ä–∏–º–µ—Ä: —Å—Ç–µ—Ä–µ—Ç—å @–Ω–∏–∫');
    }

    const playerId = mentionedUser.id;
    if (!data.–∏–≥—Ä–æ–∫–∏[playerId]) {
      return message.channel.send(`‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ ${mentionedUser.username} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`);
    }

    delete data.–∏–≥—Ä–æ–∫–∏[playerId];
    saveData(data);
    return message.channel.send(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ ${mentionedUser.username} —É—Å–ø–µ—à–Ω–æ —Å—Ç–µ—Ä—Ç–æ.`);
  }

  if (command === '–∑–∞–±—Ä–∞—Ç—å') {
    if (args.length < 3) {
      return message.channel.send('‚ùó –§–æ—Ä–º–∞—Ç: !–∑–∞–±—Ä–∞—Ç—å [—Ä–µ—Å—É—Ä—Å] [–∫–æ–ª-–≤–æ] [@–Ω–∏–∫]');
    }

    const resource = args[0].toLowerCase();
    if (!VALID_RESOURCES.has(resource)) {
      return message.channel.send(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ—Å—É—Ä—Å. –î–æ—Å—Ç—É–ø–Ω—ã–µ: ${[...VALID_RESOURCES].join(', ')}`);
    }

    const amount = parseInt(args[1], 10);
    if (isNaN(amount) || amount <= 0) {
      return message.channel.send('‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.');
    }

    const mentionedUser = message.mentions.users.first();
    if (!mentionedUser) {
      return message.channel.send('‚ùó –£–∫–∞–∂–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ü—Ä–∏–º–µ—Ä: !–∑–∞–±—Ä–∞—Ç—å –¥–µ—Ä–µ–≤–æ 100 @–Ω–∏–∫');
    }

    const playerId = mentionedUser.id;
    const playerData = data.–∏–≥—Ä–æ–∫–∏[playerId];
    if (!playerData) {
      return message.channel.send(`‚ùå –ò–≥—Ä–æ–∫ ${mentionedUser.username} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    }

    playerData.—Ä–µ—Å—É—Ä—Å—ã[resource] = (playerData.—Ä–µ—Å—É—Ä—Å—ã[resource] || 0) - amount;
    if (playerData.—Ä–µ—Å—É—Ä—Å—ã[resource] < 0) playerData.—Ä–µ—Å—É—Ä—Å—ã[resource] = 0;
    saveData(data);

    return message.channel.send(`‚úÖ –£ –∏–≥—Ä–æ–∫–∞ ${mentionedUser} –æ—Ç–Ω—è—Ç–æ ${amount} ${resource}.`);
  }

  if (command === '–≤—ã–¥–∞—Ç—å') {
    if (args.length < 3) {
      return message.channel.send('‚ùó –§–æ—Ä–º–∞—Ç: !–≤—ã–¥–∞—Ç—å [—Ä–µ—Å—É—Ä—Å] [–∫–æ–ª-–≤–æ] [@–Ω–∏–∫]');
    }

    const resource = args[0].toLowerCase();
    if (!VALID_RESOURCES.has(resource)) {
      return message.channel.send(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ—Å—É—Ä—Å. –î–æ—Å—Ç—É–ø–Ω—ã–µ: ${[...VALID_RESOURCES].join(', ')}`);
    }

    const amount = parseInt(args[1], 10);
    if (isNaN(amount) || amount <= 0) {
      return message.channel.send('‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.');
    }

    const mentionedUser = message.mentions.users.first();
    if (!mentionedUser) {
      return message.channel.send('‚ùó –£–∫–∞–∂–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ü—Ä–∏–º–µ—Ä: !–≤—ã–¥–∞—Ç—å –¥–µ—Ä–µ–≤–æ 100 @–Ω–∏–∫');
    }

    const playerId = mentionedUser.id;
    const playerData = data.–∏–≥—Ä–æ–∫–∏[playerId];
    if (!playerData) {
      return message.channel.send(`‚ùå –ò–≥—Ä–æ–∫ ${mentionedUser.username} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    }

    playerData.—Ä–µ—Å—É—Ä—Å—ã[resource] = (playerData.—Ä–µ—Å—É—Ä—Å—ã[resource] || 0) + amount;
    saveData(data);

    return message.channel.send(`‚úÖ –ò–≥—Ä–æ–∫—É ${mentionedUser} –≤—ã–¥–∞–Ω–æ ${amount} ${resource}.`);
  }

  if (command === '!–∞–¥–º–∏–Ω—ã') {
    if (ADMINS.size === 0) {
      return message.channel.send('–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –ø—É—Å—Ç.');
    }
    const adminList = [...ADMINS].map(id => `<@${id}>`).join('\n');
    return message.channel.send(`üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n${adminList}`);
  }

});

client.login(process.env.TOKEN);